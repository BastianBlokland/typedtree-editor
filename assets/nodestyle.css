.nodeBackground {
    fill: #999;
    rx: 10;
    ry: 10;
    stroke: #000;
    stroke-width: 4;
}

.nodeTypeText {
    text-anchor: middle;
    font-weight: bold;
}

/* Field backgrounds */
.stringValueBackground, .stringArrayValueBackground {
    fill: #696;
    rx: 10;
    ry: 10;
    stroke: #000;
    stroke-width: 2;
}

.numberValueBackground, .numberArrayValueBackground {
    fill: #669;
    rx: 10;
    ry: 10;
    stroke: #000;
    stroke-width: 2;
}

.booleanValueBackground, .booleanArrayValueBackground {
    fill: #966;
    rx: 10;
    ry: 10;
    stroke: #000;
    stroke-width: 2;
}

.nodeValueBackground, .nodeArrayValueBackground {
    fill: #999966;
    rx: 10;
    ry: 10;
    stroke: #000;
    stroke-width: 2;
}

.nodeFieldName {
    font-weight: bold;
}

/* Field values */
.stringFieldValue {
    background-color: #DDD;
    width: 90%;
}

.numberFieldValue {
    background-color: #DDD;
    width: 90%;
}

.booleanFieldValue {
    background-color: #DDD;
    cursor: pointer;
}

.nodeConnection {
    stroke: #000;
    stroke-width: 4;
    fill: none;
}

.fieldValueButton:hover {
    fill: #FFF;
    cursor: pointer;
}

.fieldValueButton {
    fill: #999;
}

/* Number spinners cause more problems then they are worth in our case. For example in Safari they
render in completely random locations when used inside a svg foreign-object. */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}
input[type=number] {
    -moz-appearance: textfield;
}
